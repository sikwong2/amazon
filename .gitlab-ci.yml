# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# These variables are stored in Gitlab under Settings->CI/CD->Variables
variables:
  POSTGRES_HOST: $POSTGRES_HOST
  POSTGRES_PORT: $POSTGRES_PORT
  POSTGRES_DB: $POSTGRES_DB
  POSTGRES_USER: $POSTGRES_USER
  POSTGRES_PASSWORD: $POSTGRES_PASSWORD
  SHOPPER_APP_PORT: $SHOPPER_APP_PORT
  VENDOR_APP_PORT: $VENDOR_APP_PORT
  ADMIN_APP_PORT: $ADMIN_APP_PORT
  ACCOUNT_SERVICE_PORT: $ACCOUNT_SERVICE_PORT
  PRODUCT_SERVICE_PORT: $PRODUCT_SERVICE_PORT
  ORDER_SERVICE_PORT: $ORDER_SERVICE_PORT

# can make own image later
image: docker:latest

services:
  - docker:dind
  
# before_script:
#   - docker version
#   - docker-compose version

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

AccountService:
  stage: build
  script: 
    - echo "Building accountservice"
    - apk add --update nodejs npm docker-compose
    - node --version
    - cd AccountService
    - npm install
    - docker-compose up -d
    - sleep 20
    - docker-compose down
    - echo "Build complete"
  when: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'  # Run for all changes to a merge request's source branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH       # Run for all changes to the default branch

ProductService:
  stage: build
  script:
    - echo "Building productservice"
    - apk add --update nodejs npm docker-compose
    - cd ProductService
    - npm install
    - docker-compose up -d
    - sleep 20
    - docker-compose down
    - echo "Build complete"
  when: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'  # Run for all changes to a merge request's source branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH       # Run for all changes to the default branch

OrderService:
  stage: build
  script:
    - echo "Building orderservice"
    - apk add --update nodejs npm docker-compose
    - cd OrderService
    - npm install
    - docker-compose up -d
    - sleep 20
    - docker-compose down
    - echo "Build complete"
  when: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'  # Run for all changes to a merge request's source branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH       # Run for all changes to the default branch


Test:
  stage: test
  script:
    - echo "Testing"
    - apk add --update nodejs npm
    - echo "POSTGRES_HOST=$POSTGRES_HOST" >> .env
    - echo "POSTGRES_PORT=$POSTGRES_PORT" >> .env
    - echo "POSTGRES_DB=$POSTGRES_DB" >> .env
    - echo "POSTGRES_USER=$POSTGRES_USER" >> .env
    - echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
    - echo "SHOPPER_APP_PORT=$SHOPPER_APP_PORT" >> .env
    - echo "VENDOR_APP_PORT=$VENDOR_APP_PORT" >> .env
    - echo "ADMIN_APP_PORT=$ADMIN_APP_PORT" >> .env
    - echo "ACCOUNT_SERVICE_PORT=$ACCOUNT_SERVICE_PORT" >> .env
    - echo "PRODUCT_SERVICE_PORT=$PRODUCT_SERVICE_PORT" >> .env
    - echo "ORDER_SERVICE_PORT=$ORDER_SERVICE_PORT" >> .env
    - npm run test
    - echo "Test complete"
  when: manual

AccountService-test:
  stage: test
  script:
      - echo "Testing accountservice"
      - apk add --update nodejs npm
      - npm install -g n
      - cd AccountService
      - npm install
      - npm test
      - echo "Test complete"
  when: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'  # Run for all changes to a merge request's source branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH       # Run for all changes to the default branch

ProductService-test:
  stage: test
  script:
    - echo "Testing productservice"
    - apk add --update nodejs npm
    - npm install -g n
    - cd ProductService
    - npm install
    - npm test
    - echo "Test complete"
  when: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'  # Run for all changes to a merge request's source branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH       # Run for all changes to the default branch

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."

