# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# These variables are stored in Gitlab under Settings->CI/CD->Variables
variables:
  POSTGRES_DB: $POSTGRES_DB
  POSTGRES_USER: $POSTGRES_USER
  POSTGRES_PASSWORD: $POSTGRES_PASSWORD

image:
  name: docker/compose:latest

# before_script:
#   - docker version
#   - docker-compose version

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

AccountService:
  stage: build
  script: 
    - echo "Building accountservice"
    - apt-get update && apt-get install -y nodejs npm docker-compose
    - cd AccountService
    - npm install
    - docker-compose up -d
    - sleep 20
    - docker-compose down
    - echo "Build complete"

ProductService:
  stage: build
  script:
    - echo "Building productservice"
    - apt-get update && apt-get install -y nodejs npm docker-compose
    - apt install docker-compose-plugin -y
    - cd ProductService
    - npm install
    - docker-compose up -d
    - sleep 20
    - docker-compose down
    - echo "Build complete"

OrderService:
  stage: build
  script:
    - echo "Building orderservice"
    - apt-get update && apt-get install -y nodejs npm docker-compose
    - cd OrderService
    - npm install
    - docker-compose up -d
    - sleep 20
    - docker-compose down
    - echo "Build complete"

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - npm install
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
